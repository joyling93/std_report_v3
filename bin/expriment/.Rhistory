load("/Users/zhuomingx/Desktop/Rbio/std_report_v3/test_env/test_env_commission.RData")
View(dt.all)
plot_dt <-
dt.all %>%
select(A.合同签订日期,S.合同金额) %>%
mutate(
年度=as.factor(year(A.合同签订日期)),
季度=as.factor(quarter(A.合同签订日期)),
月度=as.factor(month(A.合同签订日期)),
) %>%
group_by(年度,季度,月度) %>%
summarise(
金额总计=sum(S.合同金额,na.rm = T)
)
library(tidyverse)
plot_dt <-
dt.all %>%
select(A.合同签订日期,S.合同金额) %>%
mutate(
年度=as.factor(year(A.合同签订日期)),
季度=as.factor(quarter(A.合同签订日期)),
月度=as.factor(month(A.合同签订日期)),
) %>%
group_by(年度,季度,月度) %>%
summarise(
金额总计=sum(S.合同金额,na.rm = T)
)
library(lubridate)
plot_dt <-
dt.all %>%
select(A.合同签订日期,S.合同金额) %>%
mutate(
年度=as.factor(year(A.合同签订日期)),
季度=as.factor(quarter(A.合同签订日期)),
月度=as.factor(month(A.合同签订日期)),
) %>%
group_by(年度,季度,月度) %>%
summarise(
金额总计=sum(S.合同金额,na.rm = T)
)
View(plot_dt)
unique(plot_dt)
unique(plot_dt$年度)
combn(unique(plot_dt$年度))
combn(unique(plot_dt$年度),2)
?combn()
combn(unique(plot_dt$年度),2,simplify = T)
combn(unique(plot_dt$年度),2,simplify = F)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
uniqueId.prefix <- "fw-"
dt <- tql_query(tql.query,uniqueId.prefix)
dt_new <-
bind_rows(discard(dt,is.null)) %>%
rename(创建时间=created,
标题=content,
截止时间=dueDate,
开始时间=startDate,
任务类型=templateId,
任务ID=uniqueId,
父任务.ObjectId=parentTaskId,
任务.ObjectId=taskId) %>%
#将任务类型id转化为具体任务类型名称
dplyr::filter(任务类型%in%c('5fd9bae5f0f303707a50a6f5',
'5fd9b4421e0cc70378ce5d94',
'5fdac5257155aa69e4230c0c',
'601376d93921d3e46ca2273b',
'601388f10f3155092eb4fb67')) %>%
mutate(
任务类型=fct_recode(as.factor(任务类型),
生产序列模板='5fd9bae5f0f303707a50a6f5',
销售序列模板='5fd9b4421e0cc70378ce5d94',
售后序列模板='5fdac5257155aa69e4230c0c',
研发任务模板='601376d93921d3e46ca2273b',
研发执行任务模板='601388f10f3155092eb4fb67')
)
db <- DBI::dbConnect(SQLite(),dbname='data/testDB.db')
cf_phrase <- dbReadTable(db,'cf_phrase')
dt_db <- dbReadTable(db,'db')
#以预制cfid对照表转化customfields为字段名称
for (i in 1:length(colnames(dt_new))) {
if(colnames(dt_new)[i]%in%cf_phrase$customfildID){
colnames(dt_new)[i] <- subset(cf_phrase,customfildID==colnames(dt_new)[i]) %>%
pull(name)
}
}
db <- DBI::dbConnect(SQLite(),dbname='../data/testDB.db')
getwd()
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
cf_phrase <- dbReadTable(db,'cf_phrase')
dt_db <- dbReadTable(db,'db')
#以预制cfid对照表转化customfields为字段名称
for (i in 1:length(colnames(dt_new))) {
if(colnames(dt_new)[i]%in%cf_phrase$customfildID){
colnames(dt_new)[i] <- subset(cf_phrase,customfildID==colnames(dt_new)[i]) %>%
pull(name)
}
}
View(dt_new)
View(dt)
dt_new <-
bind_rows(discard(dt,is.null))
View(dt_new)
dt_new <-
bind_rows(discard(dt,is.null)) %>%
rename(创建时间=created,
标题=content,
截止时间=dueDate,
开始时间=startDate,
任务类型=templateId,
任务ID=uniqueId,
父任务.ObjectId=parentTaskId,
任务.ObjectId=taskId) %>%
#将任务类型id转化为具体任务类型名称
dplyr::filter(任务类型%in%c('5fd9bae5f0f303707a50a6f5',
'5fd9b4421e0cc70378ce5d94',
'5fdac5257155aa69e4230c0c',
'601376d93921d3e46ca2273b',
'601388f10f3155092eb4fb67')) %>%
mutate(
任务类型=fct_recode(as.factor(任务类型),
生产序列模板='5fd9bae5f0f303707a50a6f5',
销售序列模板='5fd9b4421e0cc70378ce5d94',
售后序列模板='5fdac5257155aa69e4230c0c',
研发任务模板='601376d93921d3e46ca2273b',
研发执行任务模板='601388f10f3155092eb4fb67')
)
db <- DBI::dbConnect(SQLite(),dbname='data/testDB.db')
cf_phrase <- dbReadTable(db,'cf_phrase')
dt_db <- dbReadTable(db,'db')
#以预制cfid对照表转化customfields为字段名称
for (i in 1:length(colnames(dt_new))) {
if(colnames(dt_new)[i]%in%cf_phrase$customfildID){
colnames(dt_new)[i] <- subset(cf_phrase,customfildID==colnames(dt_new)[i]) %>%
pull(name)
}
}
dt_new <-
dt_new %>%
select(!matches('^\\d')) %>% #去除没有转化名称的customfields列
mutate(
CD.产能类型 = map_chr(CD.产能类型,str_replace_all,pattern='拼装和酶切连接，LR载体',
replacement='拼装和酶切连接；LR载体'),
import.time = as.numeric(Sys.time())
)
View(dt_new)
dt[[161]][["uniqueId"]]
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND _uniqueid=fw-5390"
#tql.query <-'_projectId=58081fe94863251f4269aaf3 AND _tasklistId=5dedbcd453b99f0020ec76aa OR _tasklistId=5ce122f34f895a001991ae12 isArchived = false'
uniqueId.prefix <- "fw-"
#dt <- tql_query(tql.query,uniqueId.prefix)
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 10,
"pageToken"= pageToken,
"orderBy"= "dueDate"
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
content(result)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND _uniqueid=5390"
#tql.query <-'_projectId=58081fe94863251f4269aaf3 AND _tasklistId=5dedbcd453b99f0020ec76aa OR _tasklistId=5ce122f34f895a001991ae12 isArchived = false'
uniqueId.prefix <- "fw-"
#dt <- tql_query(tql.query,uniqueId.prefix)
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 10,
"pageToken"= pageToken,
"orderBy"= "dueDate"
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
content(result)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND _uniqueID=5390"
#tql.query <-'_projectId=58081fe94863251f4269aaf3 AND _tasklistId=5dedbcd453b99f0020ec76aa OR _tasklistId=5ce122f34f895a001991ae12 isArchived = false'
uniqueId.prefix <- "fw-"
#dt <- tql_query(tql.query,uniqueId.prefix)
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 10,
"pageToken"= pageToken,
"orderBy"= "dueDate"
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
content(result)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND uniqueid=fw-5390"
#tql.query <-'_projectId=58081fe94863251f4269aaf3 AND _tasklistId=5dedbcd453b99f0020ec76aa OR _tasklistId=5ce122f34f895a001991ae12 isArchived = false'
uniqueId.prefix <- "fw-"
#dt <- tql_query(tql.query,uniqueId.prefix)
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 10,
"pageToken"= pageToken,
"orderBy"= "dueDate"
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
content(result)
