tidyr::unnest() %>%
filter(载体描述!='')
file_name <- '../debug/【谢卓明 的项目】任务信息表_20201208 (4).csv'
raw_data <-
readr::read_csv(file.path('../debug',file_name))
dt <- tidyr::fill(data=raw_data,10:19,.direction=c("downup"))
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
View(dt)
View(t2)
dt <- tidyr::fill(data=raw_data,.direction=c("downup"))
View(dt)
dt <- tidyr::fill(data=raw_data,10:20,.direction=c("downup"))
View(dt)
file_name <- '../debug/【谢卓明 的项目】任务信息表_20201208 (5).csv'
raw_data <-
readr::read_csv(file.path('../debug',file_name))
dt <- tidyr::fill(data=raw_data,10:20,.direction=c("downup"))
View(raw_data)
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
View(t2)
dt <- tidyr::fill(data=raw_data,10:23,.direction=c("downup"))
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
View(t2)
View(t2)
View(raw_data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(t2)
View(dt)
file_name <- '../debug/【谢卓明 的项目】任务信息表_20201208 (6).csv'
raw_data <-
readr::read_csv(file.path('../debug',file_name))
dt <- tidyr::fill(data=raw_data,10:23,.direction=c("downup"))
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
View(dt)
file_name <- '../debug/【谢卓明 的项目】任务信息表_20201208 (6).csv'
raw_data <-
readr::read_csv(file.path('../debug',file_name))
dt <- tidyr::fill(data=raw_data,10:,.direction=c("downup"))
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
raw_data <-
readr::read_csv(file.path('../debug',file_name))
dt <- tidyr::fill(data=raw_data,10:24,.direction=c("downup"))
t2 <-
dt[1,] %>%
mutate(across(7:9,~strsplit(.x,split = '[\f\n\r\t\v]'))) %>%
tidyr::unnest() %>%
filter(载体描述!='')
View(t2)
t2 %>%
select(客户姓名,合同编号)
t2 %>%
select(客户姓名,合同编号) %>%
distinct()
colnames(t2)
t2 %>%
select("载体编号","载体描述","载体类型")
vector_info <-
t2 %>%
select("载体编号","载体描述","载体类型")
my_doc <- read_docx('./data/vector&vrius_templete.docx')
title_info
title_info <-
t2 %>%
select(客户姓名,合同编号) %>%
distinct()
title_info
vector_info
pre_read_ft <-
vector_info %>%
flextable()
my_doc %>%
cursor_bookmark("contract_num")%>%
body_add_par(title_info$合同编号,style  = 'Subtitle')%>%
cursor_bookmark("date")%>%
body_add_par(value = Sys.Date(),style  = 'Subtitle')%>%
cursor_bookmark("theme")%>%
body_add_par(value = paste0('项目名称:',title_info$客户姓名),style  = 'Subtitle')%>%
cursor_bookmark("pre_read_ft")%>%
body_add_flextable(pre_read_ft,align='center')
paste(title_info$合同编号,
title_info$客户姓名,
'结题报告.docx',
sep = '-')
dir_creator(temp_dir = temp_dir,
contract_num = title_info$合同编号,
vector_list = unique(pre_read$载体编号),
project = project2
)
source('./bin/dir_creator.R')
source('./bin/dir_creator.R')
library(reticulate)
source_python('test.py')
source_python('test.py')
View(r)
source('test.py')
source_python('test.py')
source_python('test.py')
feature_extract('../debug/gb/pHS-AVC-LY018.gb')
tuple(feature_extract('../debug/gb/pHS-AVC-LY018.gb'))
?dir(
)
dir('../debug/gb','*.gb')
dir('../debug/gb','*.gb',full.names = T)
gb_list <- dir('../debug/gb','*.gb',full.names = T)
purrr::map(gb_list,feature_extract)
test <- purrr::map(gb_list,feature_extract)
View(test)
test[1]
test[1][2]
test[1][1]
test[1][1][1]
str(test[1][1])
test[1][1]
test[1][1][[1]]
test[1][[1]]
test[1][[1]][1]
test[1][[1]][2]
source_python('test.py')
gb_list <- dir('../debug/gb','*.gb',full.names = T)
test <- purrr::map(gb_list,feature_extract)
View(test)
source_python('test.py')
gb_list <- dir('../debug/gb','*.gb',full.names = T)
test <- purrr::map(gb_list,feature_extract)
source_python('test.py')
gb_list <- dir('../debug/gb','*.gb',full.names = T)
test <- purrr::map(gb_list,feature_extract)
View(test)
source_python('test.py')
gb_list <- dir('../debug/gb','*.gb',full.names = T)
test <- purrr::map(gb_list,feature_extract)
View(test)
library(reticulate)
library(reticulate)
source_python('merge_excel.py')
filelist <- dir(pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
py_discover_config()
py_config()
virtualenv_list()
py_install(xlrd)
virtualenv_create("r-pandas")
py_install(xlrd,envname = 'r-pandas')
py_install('xlrd',envname = 'r-pandas')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
virtualenv_list()
library(reticulate)
use_virtualenv(virtualenv = "r-pandas", required = FALSE)
source_python('merge_excel.py')
df <- file_merge(filelist)
use_virtualenv(virtualenv = "r-pandas", required =TRUE)
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
library(reticulate)
use_virtualenv(virtualenv = "r-pandas", required =TRUE)
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
filelist
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
py_install('pandas',envname = 'r-pandas')
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
filelist
py_install('openpyxl',envname = 'r-pandas')
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '分子信息表',full.names = T)
df <- file_merge(filelist)
use_virtualenv(virtualenv = "r-pandas", required =TRUE)
source_python('merge_excel.py')
filelist <- dir('../debug',pattern = '.xls',full.names = T)
df <- file_merge(filelist)
dir('../debug',pattern = '.xls',full.names = T)
dir('../debug',pattern = '.xls$',full.names = T)
filelist <- dir('../debug',pattern = '.xls$',full.names = T)
df <- file_merge(filelist)
filelist <- dir('../debug',pattern = '.xls$',full.names = T)
df <- file_merge(filelist)
View(df)
?source
filelist
?openxlsx::readWorkbook()
?readxl::read_excel()
# library(reticulate)
# use_virtualenv(virtualenv = "r-pandas", required =TRUE)
# source_python('merge_excel.py')
# filelist <- dir('../debug',pattern = '.xls$',full.names = T)
# df <- file_merge(filelist)
library(RSQLite)
?DBI::dbConnect()
?DBI
db <- DBI::dbConnect('../data/testDB.db')
?DBI::dbConnect
db <- DBI::dbConnect(SQLite(),dbname='../data/testDB.db')
dbListTables()
dbListTables(db)
dbWriteTable(db,'test',df)
dbListTables(db)
dbReadTable(db,'test')
str(dbReadTable(db,'test'))
dbWriteTable(db,'test',df,append = TRUE)
dbReadTable(db,'test')
dbWriteTable(db,'分子',df)
dbListTables(db)
dbReadTable(db,'分子')
dbGetQuery(db,'DROP TABLE test')
dbListTables(db)
?dbExecute()
?dbExecute
dbGetQuery(db,'DROP TABLE 分子')
dbListTables(db)
dbWriteTable(db,'分子信息表',df)
dbListTables(db)
df <- openxlsx::read.xlsx('../debug/病毒信息表')
# library(reticulate)
# use_virtualenv(virtualenv = "r-pandas", required =TRUE)
# source_python('merge_excel.py')
# filelist <- dir('../debug',pattern = '.xls$',full.names = T)
# df <- file_merge(filelist)
df <- openxlsx::read.xlsx('../debug/病毒信息表.xlsx')
View(df)
dbWriteTable(db,'病毒信息表',df)
# library(reticulate)
# use_virtualenv(virtualenv = "r-pandas", required =TRUE)
# source_python('merge_excel.py')
# filelist <- dir('../debug',pattern = '.xls$',full.names = T)
# df <- file_merge(filelist)
df <- openxlsx::read.xlsx('../debug/细胞信息表.xlsx')
dbWriteTable(db,'细胞信息表',df)
dbListTables(db)
dir('../debug',pattern = '.xlsx',full.names = T)
dir('../debug',pattern = '信息表.xlsx',full.names = T)
dir('../debug/dbtest',pattern = '信息表.xlsx',full.names = T)
filelist <- dir('../debug/dbtest',pattern = '信息表.xlsx',full.names = T)
test <-
purrr::map(filelist,openxlsx::read.xlsx)
View(test)
stringr::str_subset(filepath,'分子信息表')
filepath <- dir('../debug/dbtest',pattern = '信息表.xlsx',full.names = T)
stringr::str_subset(filepath,'分子信息表')
stringr::str_subset(filepath,'啦啦信息表')
if(stringr::str_subset(filepath,'啦啦信息表')){
print('pass')
}
is.null(stringr::str_subset(filepath,'啦啦信息表'))
length(stringr::str_subset(filepath,'啦啦信息表'))
if(length(stringr::str_subset(filepath,'分子信息表'))>0){
print('pass')
}
library(shiny)
library(officer)
library(stringr)
library(dplyr)
library(flextable)
library(tidyr)
library(viridis)
library(magick)
library(stringr)
library(lubridate)
library(ggplot2)
library(RSQLite)
if(length(stringr::str_subset(filepath,'分子信息表'))>0){
dt <- bind_rows(purrr::map(filepath,openxlsx::read.xlsx))
}
View(dt)
stringr::str_subset(filepath,'分子信息表')
if(length(stringr::str_subset(filepath,'分子信息表'))>0){
filelist <- stringr::str_subset(filepath,'分子信息表')
dt <- bind_rows(purrr::map(filelist,openxlsx::read.xlsx))
}
View(dt)
dir('../debug/dbtest',pattern = '信息表.xlsx')
stringr::str_detect(filename,'分子信息表')
filename <- dir('../debug/dbtest',pattern = '信息表.xlsx')
stringr::str_detect(filename,'分子信息表')
any(stringr::str_detect(filename,'分子信息表'))
？dbDisconnect
?dbDisconnect
runApp('~/Desktop/Rbio/tb_optimize')
runApp('~/Desktop/Rbio/tb_optimize')
?fileInput
runApp('~/Desktop/Rbio/tb_optimize')
runApp('~/Desktop/Rbio/tb_optimize')
runApp('~/Desktop/Rbio/tb_optimize')
dbListTables(db)
dbReadTable('分子信息表')
dbReadTable(db,'分子信息表')
？image_scale
?image_scale
?cowplot::image_scale
shiny::runApp('~/Desktop/Rbio/std_report_v3')
runApp('~/Desktop/Rbio/std_report_v3')
library(RSQLite)
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
dt_fin <- dbReadTable(db,'db')
View(dt_fin)
library(readxl)
?readxl::read_excel()
readxl_example()
dt <- openxlsx::loadWorkbook('/Users/zhuomingx/Desktop/Rbio/std_report_v3/debug/test/全任务归档测试.xlsx')
names(dt)
dt_list <-
purrr::map_dfr(names(dt),function(x){
readxl::read_excel(file_p,sheet = x,col_types = 'text')
}
)
file_p <- '/Users/zhuomingx/Desktop/Rbio/std_report_v3/debug/test/全任务归档测试.xlsx'
purrr::map_dfr(names(dt),function(x){
readxl::read_excel(file_p,sheet = x,col_types = 'text')
})
dt_list <-
purrr::map_dfr(names(dt),function(x){
readxl::read_excel(file_p,sheet = x,col_types = 'text')
})
View(dt_list)
as.chr(Sys.time())
as.character(Sys.time())
dt_list$import_time <- as.character(Sys.time())
colnames(y) <- str_replace_all(colnames(y),'\\"','')# 去除标题中多余“号
colnames(y) <- str_replace_all(colnames(y),'[-()（）]','.')# 转化标题中-为.
dt_list$import_time <- as.character(Sys.time())
colnames(dt_list) <- str_replace_all(colnames(dt_list),'\\"','')# 去除标题中多余“号
colnames(dt_list) <- str_replace_all(colnames(dt_list),'[-()（）]','.')# 转化标题中-为.
View(dt_list)
dt_list <-
mutate(dt_list,CD.产能类型 = map_chr(CD.产能类型,str_replace_all,pattern='拼装和酶切连接，LR载体',
replacement='拼装和酶切连接；LR载体'))
dt_list <-
purrr::map_dfr(names(dt),function(x){
readxl::read_excel(file_p,sheet = x,col_types = 'text')
})
dt_list$import_time <- as.character(Sys.time())
colnames(dt_list) <- str_replace_all(colnames(dt_list),'\\"','')# 去除标题中多余“号
colnames(dt_list) <- str_replace_all(colnames(dt_list),'[[:punct:]]','.')# 转化标题中-为.
View(dt_list)
dt_list <-
mutate(dt_list,CD.产能类型 = map_chr(CD.产能类型,str_replace_all,pattern='拼装和酶切连接，LR载体',
replacement='拼装和酶切连接；LR载体'))
dbWriteTable(db,'db',dt_fin,overwrite=T)
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
dt_fin <- dbReadTable(db,'db')
View(dt_fin)
dbWriteTable(db,'db',dt_list,overwrite=T)
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
dt_fin <- dbReadTable(db,'db')
View(dt_fin)
?read_table()
dt <- read_table(file_p2,col_types = 'text')
file_p2 <- '/Users/zhuomingx/Desktop/Rbio/std_report_v3/debug/test/2020任务归档测试.csv'
dt <- read_table(file_p2,col_types = 'text')
dt <- read_table(file=file_p2,col_types = 'text')
dt <- read_delim(file=file_p2,col_types = 'text')
dt <- read_delim(file=file_p2,col_types = 'text',delim = ',')
dt <- read_csvfile=file_p2,col_types = 'text')
dt <- read_csvfile(file_p2,col_types = 'text')
dt <- read_csv(file_p2,col_types = 'text')
dbDisconnect()
dbDisconnect(db)
dt <- read_csv(file_p2,col_types = 'text')
dt <- read_csv("~/Desktop/Rbio/std_report_v3/debug/test/2020任务归档测试.csv",col_types = 'text')
dt <- read_csv("~/Desktop/Rbio/std_report_v3/debug/test/2020任务归档测试.csv")
View(dt)
?read_csv
dt <- read_csv("~/Desktop/Rbio/std_report_v3/debug/test/2020任务归档测试.csv",col_types = 'c')
View(dt)
?read.csv()
dt <- read.csv("~/Desktop/Rbio/std_report_v3/debug/test/2020任务归档测试.csv",colClasses = 'character')
View(dt)
subtype <-
function(type){
dt_sub <- dt %>%
select(任务ID,标题,contains(type)) %>%
drop_na() %>%
rename(
CE.实验执行人姓名 = paste0('g5',type,'姓名'),
截止时间 = paste0('d5',type,'截止'),
Su.实验实际开始日期 = paste0('d5',type,'开始'),
Su.实验实际完成日期 = paste0('g5',type,'完成'),
CD.子产能 = paste0('d5',type,'产能')
) %>%
mutate(
开始时间 = Su.实验实际开始日期,
CD.子任务类型 = type,
任务类型 = '生产序列模板',
是否是子任务 = 'Y',
标题 = paste0(任务ID,'-',标题),
)
}
dt_product <- map_dfr(c('分子','病毒','细胞'),subtype) %>%
mutate(任务ID = paste0(任务ID,CD.子任务类型))#虚拟任务ID
View(dt_product)
dt_sale <- dt %>%
select(!contains(c('分子','病毒','细胞'))) %>%
drop_na() %>%
rename(S.合同金额 = b4合同金额,
S.消费金额 = b4消费金额,
A.方案设计者 = 方案设计者,
D.方案设计延期 = 方案设计延期,
A.方案指派日期 = d5总开始) %>%
mutate(
任务类型 = '销售序列模板',
是否是子任务 = 'N',
)
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
) %>%
bind_rows(dbReadTable(db,'db')) %>%
arrange(desc(import_time)) %>%
filter(!duplicated(任务ID))
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
)
View(dt_fin)
?rbind()
?bind_rows()
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
) %>%
bind_rows(dbReadTable(db,'db')) %>%
arrange(desc(import_time)) %>%
filter(!duplicated(任务ID))
View(dt_product)
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
) %>%
bind_rows(dbReadTable(db,'db')) %>%
arrange(desc(import_time))
View(dt_fin)
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
) %>%
bind_rows(dbReadTable(db,'db')) %>%
arrange(desc(import_time)) %>%
filter(!duplicated(任务ID))
dt_fin <- bind_rows(dt_product,dt_sale) %>%
mutate(
import_time = as.character(Sys.time()),
CD.子产能 = as.character(CD.子产能),
S.合同金额 = as.character(S.合同金额),
任务ID = tolower(任务ID),
CD.组成产能 = CD.子产能,
CD.产能类型 = '2020旧项目'
) %>%
bind_rows(dbReadTable(db,'db')) %>%
arrange(desc(import_time)) %>%
dplyr::filter(!duplicated(任务ID))
View(dt_fin)
dbWriteTable(db,'db',dt_fin,overwrite=T)
db <- DBI::dbConnect(SQLite(),dbname='/Users/zhuomingx/Desktop/Rbio/std_report_v3/data/testDB.db')
dt_fin <- dbReadTable(db,'db')
View(dt_fin)
