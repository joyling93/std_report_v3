#预付款额统计
##预付款消费信息以tb字段为准，须以S.销售姓名修改销售姓名和销售类别
advance.dt <-
dt.all %>%
dplyr::filter(
一级任务类别%in%c('预付款消费','预付款消费代理'),
time_filter(A.合同签订日期)==time_filter(time_span),
year(A.合同签订日期)==year(time_span)
) %>%
mutate(
销售姓名=S.销售姓名,
销售类别=fct_collapse(销售姓名,
刘艳=c('刘艳'),
大客户=c('大客户','周冰'),
华北大客户=c('华北大客户','杨宝兴','樊伟','贾东东'),
西南大客户=c('西南大客户','张义凯'),
other_level=c('销售专员')
)
) %>%
distinct(任务ID,.keep_all=T) %>% #台账合并tb数据时会造成TB字段重复
group_by(一级任务类别,销售类别,销售姓名,time_filter(A.合同签订日期)) %>%
summarise(
消费金额=sum(S.消费金额,na.rm = T),
代理成本=sum(Ag.外包成本,na.rm = T)
)
dt.fin <- purrr::reduce(list(invoice.dt,payment.dt,advance.dt),full_join) %>%
mutate(
across(matches('金额|成本'),replace_na,replace=0),
开票提成=pmap(list(销售类别,一级任务类别,开具金额),
function(销售类别,一级任务类别,开具金额){
p <- 0
if(销售类别=='销售专员'){
p <- switch(一级任务类别,
'常规业务'= 开具金额*0.03,
'预付款'= 开具金额*0,
'预付款消费' = 消费金额*0.04,
'预付款消费代理'=消费金额*1.8*0.04,
'代理'=开具金额*1.8*0.03,
'其他'=开具金额*0,
'大综合'=开具金额*1.8*0.06
)
}else if(销售类别=='刘艳'){
p <- switch(一级任务类别,
'常规业务'= 开具金额*0.02,
'预付款'= 开具金额*0,
'预付款消费' = 消费金额*0.03,
'预付款消费代理'=消费金额*1.8*0.02,
'代理'=开具金额*1.8*0.02,
'其他'=开具金额*0,
'大综合'=开具金额*1.8*0.04
)
}else{#各种大客户
p <- 开具金额
}
p
}),
回款提成=pmap(list(销售类别,一级任务类别,回款金额),
function(销售类别,一级任务类别,回款金额){
p <- 0
if(销售类别=='销售专员'){
p <- switch(一级任务类别,
常规业务=回款金额*0.03,
预付款=回款金额*0.03,
预付款消费=消费金额*0,
大综合=回款金额*1.8*0.06,
预付款消费代理=消费金额*0,
代理=回款金额*1.8*0.03,
其他=回款金额*0)
}else if(销售类别=='刘艳'){
p <- switch(一级任务类别,
常规业务=回款金额*0.02,
预付款=回款金额*0.02,
预付款消费=消费金额*0,
大综合=回款金额*1.8*0.04,
预付款消费代理=消费金额*0,
代理=回款金额*1.8*0.02,
其他=回款金额*0)
}else{
p <- 回款金额
}
p
})
)
output <-
list(
'汇总结果'=dt.fin,
'原始数据'=dt.all
)
View(dt.fin)
write.xlsx(output,'4月统计结果.xlsx')
save.image("~/Desktop/Rbio/std_report_v3/test_env/test_env_commission.RData")
tql_query <-
function(tql.query,uniqueId.prefix){
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
dt <-
map(dt_list,possibly(function(dt_list){
test <- transpose(dt_list$customfields)#转置customfields为cfid，value列
dt <- reduce(test,cbind) %>% #将所有customfields合并dataframe
as_tibble() %>%
unnest(cols = c(out, elt, V3)) %>%
mutate(V4=map_chr(V3,~.x[['title']])) %>% #取出customfields的值
select(out,V4) %>%
chop(V4)%>%
mutate(V4=map_chr(V4,str_c,collapse='|'))%>%
#distinct(out,.keep_all =T) %>% #对于文件类customfields，可能有多值情况
pivot_wider(names_from = out,values_from=V4) %>% #将所有customfields变为一行
bind_cols(dt_list[c('created','content','dueDate',
'startDate','templateId','uniqueId',
'parentTaskId','taskId')]) %>%
mutate(
是否是子任务=if_else(c("parentTaskId")%in%names(dt_list),#判断parentTaskId存在确定任务是否为子任务
'Y','N'),
uniqueId=paste0(uniqueId.prefix,uniqueId)#补齐任务ID前缀
)
},NULL
))
}
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
uniqueId.prefix <- "fw-"
dt <- tql_query(tql.query,uniqueId.prefix)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
uniqueId.prefix <- "fw-"
dt <- tql_query(tql.query,uniqueId.prefix)
dt <- tql_query(tql.query,uniqueId.prefix)
Sys.sleep(60)
import(PyJWT)
import PyJWT
import('PyJWT')
library(httr)
library(reticulate)
library(httr)
library(reticulate)
sns <- import('jwt')
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
uniqueId.prefix <- "fw-"
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
View(dt_list)
length(dt_list)
View(dt_list)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created < \"2020-12-31T06:28:51.998Z\" AND isArchived = false"
uniqueId.prefix <- "fw-"
dt <- tql_query(tql.query,uniqueId.prefix)
tql_query <-
function(tql.query,uniqueId.prefix){
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
dt <-
map(dt_list,possibly(function(dt_list){
test <- transpose(dt_list$customfields)#转置customfields为cfid，value列
dt <- reduce(test,cbind) %>% #将所有customfields合并dataframe
as_tibble() %>%
unnest(cols = c(out, elt, V3)) %>%
mutate(V4=map_chr(V3,~.x[['title']])) %>% #取出customfields的值
select(out,V4) %>%
chop(V4)%>%
mutate(V4=map_chr(V4,str_c,collapse='|'))%>%
#distinct(out,.keep_all =T) %>% #对于文件类customfields，可能有多值情况
pivot_wider(names_from = out,values_from=V4) %>% #将所有customfields变为一行
bind_cols(dt_list[c('created','content','dueDate',
'startDate','templateId','uniqueId',
'parentTaskId','taskId')]) %>%
mutate(
是否是子任务=if_else(c("parentTaskId")%in%names(dt_list),#判断parentTaskId存在确定任务是否为子任务
'Y','N'),
uniqueId=paste0(uniqueId.prefix,uniqueId)#补齐任务ID前缀
)
},NULL
))
}
dt <- tql_query(tql.query,uniqueId.prefix)
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
View(dt_list)
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created > \"2021-12-31T06:28:51.998Z\" AND isArchived = false"
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created > \"2021-12-31\" AND isArchived = false"
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created > \"2021-12-31\" AND isArchived = false"
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created > \"2021-12-31T06:28:51.998Z\" AND isArchived = false"
dt_list <- content(result)[[5]]
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
View(result)
result[["content"]]
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND created > \"2021-12-31T06:28:51.998Z\" AND isArchived = false"
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND accomplished > \"2021-01-01T00:00:51.998Z\" AND isArchived = false"
uniqueId.prefix <- "fw-"
library(httr)
library(reticulate)
#use_virtualenv('test', required = FALSE)
sns <- import('jwt')
encoded <-  sns$encode(list(
'_appId'= "60497fd21101c251cd202969",#appid
'iat'= as.numeric(Sys.time()),
'exp'= as.numeric(Sys.time()) + 3600), "Z5vpPJj0b7QNrihJsGVCTeDXzsPGK0j0")#app密码
headers <- c('Content-Type' = 'application/json',
'Authorization' = paste0('Bearer ',encoded),
'X-Tenant-Id' = '600e5711f2865f35d6ad662c',#企业编号
'X-Tenant-Type' = 'organization')
url <- 'https://open.teambition.com/api/task/tqlsearch'
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
#tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND accomplished > \"2021-06-01T00:00:51.998Z\" AND isArchived = false"
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
View(dt_list)
#tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND isArchived = false"
tql.query <- "_projectId=5fd6c35b083cba2bde5df319 AND accomplished > \"2021-01-01T00:00:51.998Z\" AND isArchived = false"
pageToken <- ''
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- content(result)[[5]]
pageToken <- content(result)[[4]]
#持续请求数据直到 pageToken 返回为空
while (pageToken!='') {
payload <- list("tql"= tql.query,
"pageSize"= 1000,
"pageToken"= pageToken
)
result <- POST(url,
add_headers(.headers = headers),
body = payload,encode = 'json')
dt_list <- append(dt_list,content(result)[[5]])
pageToken <- content(result)[[4]]
}
